#set( $symbol_dollar = '$' )
#set( $symbol_pound = '#' )
#set( $symbol_escape = '\' )
/*
 * This file is generated by jOOQ.
*/
package ${package}.database.or.core.tables;


import ${package}.database.generator.converter.DateConverter;
import ${package}.database.or.core.Core;
import ${package}.database.or.core.Keys;
import ${package}.database.or.core.tables.records.PaymentRecord;

import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Payment extends TableImpl<PaymentRecord> {

    private static final long serialVersionUID = 2101362692;

    /**
     * The reference instance of <code>core.PAYMENT</code>
     */
    public static final Payment PAYMENT = new Payment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentRecord> getRecordType() {
        return PaymentRecord.class;
    }

    /**
     * The column <code>core.PAYMENT.ID</code>.
     */
    public final TableField<PaymentRecord, String> ID = createField("ID", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>core.PAYMENT.AMOUNT</code>.
     */
    public final TableField<PaymentRecord, String> AMOUNT = createField("AMOUNT", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>core.PAYMENT.USAGE</code>.
     */
    public final TableField<PaymentRecord, String> USAGE = createField("USAGE", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>core.PAYMENT.SHARED</code>.
     */
    public final TableField<PaymentRecord, Boolean> SHARED = createField("SHARED", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>core.PAYMENT.DATE</code>.
     */
    public final TableField<PaymentRecord, Date> DATE = createField("DATE", org.jooq.impl.SQLDataType.DATE, this, "", new DateConverter());

    /**
     * The column <code>core.PAYMENT.NOTE</code>.
     */
    public final TableField<PaymentRecord, String> NOTE = createField("NOTE", org.jooq.impl.SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>core.PAYMENT.USER_ID</code>.
     */
    public final TableField<PaymentRecord, String> USER_ID = createField("USER_ID", org.jooq.impl.SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>core.PAYMENT.ACTIVE</code>.
     */
    public final TableField<PaymentRecord, Boolean> ACTIVE = createField("ACTIVE", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * Create a <code>core.PAYMENT</code> table reference
     */
    public Payment() {
        this(DSL.name("PAYMENT"), null);
    }

    /**
     * Create an aliased <code>core.PAYMENT</code> table reference
     */
    public Payment(String alias) {
        this(DSL.name(alias), PAYMENT);
    }

    /**
     * Create an aliased <code>core.PAYMENT</code> table reference
     */
    public Payment(Name alias) {
        this(alias, PAYMENT);
    }

    private Payment(Name alias, Table<PaymentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Payment(Name alias, Table<PaymentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Core.CORE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PaymentRecord> getPrimaryKey() {
        return Keys.PK_PAYMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PaymentRecord>> getKeys() {
        return Arrays.<UniqueKey<PaymentRecord>>asList(Keys.PK_PAYMENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Payment as(String alias) {
        return new Payment(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Payment as(Name alias) {
        return new Payment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Payment rename(String name) {
        return new Payment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Payment rename(Name name) {
        return new Payment(name, null);
    }
}

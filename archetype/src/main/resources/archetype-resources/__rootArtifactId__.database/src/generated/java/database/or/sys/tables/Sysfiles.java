/*
 * This file is generated by jOOQ.
*/
package ${package}.database.or.sys.tables;


import ${package}.database.generator.converter.LongConverter;
import ${package}.database.or.sys.Sys;
import ${package}.database.or.sys.tables.records.SysfilesRecord;

import java.math.BigDecimal;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sysfiles extends TableImpl<SysfilesRecord> {

    private static final long serialVersionUID = 1227188092;

    /**
     * The reference instance of <code>SYS.SYSFILES</code>
     */
    public static final Sysfiles SYSFILES = new Sysfiles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysfilesRecord> getRecordType() {
        return SysfilesRecord.class;
    }

    /**
     * The column <code>SYS.SYSFILES.FILEID</code>.
     */
    public final TableField<SysfilesRecord, String> FILEID = createField("FILEID", org.jooq.impl.SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>SYS.SYSFILES.SCHEMAID</code>.
     */
    public final TableField<SysfilesRecord, String> SCHEMAID = createField("SCHEMAID", org.jooq.impl.SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>SYS.SYSFILES.FILENAME</code>.
     */
    public final TableField<SysfilesRecord, String> FILENAME = createField("FILENAME", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>SYS.SYSFILES.GENERATIONID</code>.
     */
    public final TableField<SysfilesRecord, BigDecimal> GENERATIONID = createField("GENERATIONID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "", new LongConverter());

    /**
     * Create a <code>SYS.SYSFILES</code> table reference
     */
    public Sysfiles() {
        this(DSL.name("SYSFILES"), null);
    }

    /**
     * Create an aliased <code>SYS.SYSFILES</code> table reference
     */
    public Sysfiles(String alias) {
        this(DSL.name(alias), SYSFILES);
    }

    /**
     * Create an aliased <code>SYS.SYSFILES</code> table reference
     */
    public Sysfiles(Name alias) {
        this(alias, SYSFILES);
    }

    private Sysfiles(Name alias, Table<SysfilesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sysfiles(Name alias, Table<SysfilesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sys.SYS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Sysfiles as(String alias) {
        return new Sysfiles(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Sysfiles as(Name alias) {
        return new Sysfiles(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sysfiles rename(String name) {
        return new Sysfiles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sysfiles rename(Name name) {
        return new Sysfiles(name, null);
    }
}
